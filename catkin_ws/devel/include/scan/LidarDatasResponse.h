// Generated by gencpp from file scan/LidarDatasResponse.msg
// DO NOT EDIT!


#ifndef SCAN_MESSAGE_LIDARDATASRESPONSE_H
#define SCAN_MESSAGE_LIDARDATASRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scan
{
template <class ContainerAllocator>
struct LidarDatasResponse_
{
  typedef LidarDatasResponse_<ContainerAllocator> Type;

  LidarDatasResponse_()
    : scanDataResponse()  {
    }
  LidarDatasResponse_(const ContainerAllocator& _alloc)
    : scanDataResponse(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _scanDataResponse_type;
  _scanDataResponse_type scanDataResponse;




  typedef boost::shared_ptr< ::scan::LidarDatasResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scan::LidarDatasResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LidarDatasResponse_

typedef ::scan::LidarDatasResponse_<std::allocator<void> > LidarDatasResponse;

typedef boost::shared_ptr< ::scan::LidarDatasResponse > LidarDatasResponsePtr;
typedef boost::shared_ptr< ::scan::LidarDatasResponse const> LidarDatasResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scan::LidarDatasResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scan::LidarDatasResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace scan

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::scan::LidarDatasResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scan::LidarDatasResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scan::LidarDatasResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scan::LidarDatasResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scan::LidarDatasResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scan::LidarDatasResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scan::LidarDatasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1de8df23844c07a250244a4109cfb9ed";
  }

  static const char* value(const ::scan::LidarDatasResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1de8df23844c07a2ULL;
  static const uint64_t static_value2 = 0x50244a4109cfb9edULL;
};

template<class ContainerAllocator>
struct DataType< ::scan::LidarDatasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scan/LidarDatasResponse";
  }

  static const char* value(const ::scan::LidarDatasResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scan::LidarDatasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] scanDataResponse\n\
";
  }

  static const char* value(const ::scan::LidarDatasResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scan::LidarDatasResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scanDataResponse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LidarDatasResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scan::LidarDatasResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scan::LidarDatasResponse_<ContainerAllocator>& v)
  {
    s << indent << "scanDataResponse[]" << std::endl;
    for (size_t i = 0; i < v.scanDataResponse.size(); ++i)
    {
      s << indent << "  scanDataResponse[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.scanDataResponse[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCAN_MESSAGE_LIDARDATASRESPONSE_H
